// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Timescale
{
    [TimescaleResourceType("timescale:index/service:Service")]
    public partial class Service : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable HA Replica
        /// </summary>
        [Output("enableHaReplica")]
        public Output<bool> EnableHaReplica { get; private set; } = null!;

        /// <summary>
        /// The hostname for this service
        /// </summary>
        [Output("hostname")]
        public Output<string> Hostname { get; private set; } = null!;

        /// <summary>
        /// Memory GB
        /// </summary>
        [Output("memoryGb")]
        public Output<int> MemoryGb { get; private set; } = null!;

        /// <summary>
        /// Milli CPU
        /// </summary>
        [Output("milliCpu")]
        public Output<int> MilliCpu { get; private set; } = null!;

        /// <summary>
        /// Service Name is the configurable name assigned to this resource. If none is provided, a default will be generated by the provider.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The Postgres password for this service. The password is provided once during service creation
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// The port for this service
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// The region for this service. Currently supported regions are us-east-1, eu-west-1, us-west-2, eu-central-1, ap-southeast-2
        /// </summary>
        [Output("regionCode")]
        public Output<string> RegionCode { get; private set; } = null!;

        /// <summary>
        /// Deprecated: Storage GB
        /// </summary>
        [Output("storageGb")]
        public Output<int?> StorageGb { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.ServiceTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// The Postgres user for this service
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;

        /// <summary>
        /// The VpcID this service is tied to.
        /// </summary>
        [Output("vpcId")]
        public Output<int?> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a Service resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Service(string name, ServiceArgs? args = null, CustomResourceOptions? options = null)
            : base("timescale:index/service:Service", name, args ?? new ServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Service(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
            : base("timescale:index/service:Service", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Service resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Service Get(string name, Input<string> id, ServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new Service(name, id, state, options);
        }
    }

    public sealed class ServiceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable HA Replica
        /// </summary>
        [Input("enableHaReplica")]
        public Input<bool>? EnableHaReplica { get; set; }

        /// <summary>
        /// Memory GB
        /// </summary>
        [Input("memoryGb")]
        public Input<int>? MemoryGb { get; set; }

        /// <summary>
        /// Milli CPU
        /// </summary>
        [Input("milliCpu")]
        public Input<int>? MilliCpu { get; set; }

        /// <summary>
        /// Service Name is the configurable name assigned to this resource. If none is provided, a default will be generated by the provider.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The region for this service. Currently supported regions are us-east-1, eu-west-1, us-west-2, eu-central-1, ap-southeast-2
        /// </summary>
        [Input("regionCode")]
        public Input<string>? RegionCode { get; set; }

        /// <summary>
        /// Deprecated: Storage GB
        /// </summary>
        [Input("storageGb")]
        public Input<int>? StorageGb { get; set; }

        [Input("timeouts")]
        public Input<Inputs.ServiceTimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// The VpcID this service is tied to.
        /// </summary>
        [Input("vpcId")]
        public Input<int>? VpcId { get; set; }

        public ServiceArgs()
        {
        }
        public static new ServiceArgs Empty => new ServiceArgs();
    }

    public sealed class ServiceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable HA Replica
        /// </summary>
        [Input("enableHaReplica")]
        public Input<bool>? EnableHaReplica { get; set; }

        /// <summary>
        /// The hostname for this service
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// Memory GB
        /// </summary>
        [Input("memoryGb")]
        public Input<int>? MemoryGb { get; set; }

        /// <summary>
        /// Milli CPU
        /// </summary>
        [Input("milliCpu")]
        public Input<int>? MilliCpu { get; set; }

        /// <summary>
        /// Service Name is the configurable name assigned to this resource. If none is provided, a default will be generated by the provider.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The Postgres password for this service. The password is provided once during service creation
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The port for this service
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The region for this service. Currently supported regions are us-east-1, eu-west-1, us-west-2, eu-central-1, ap-southeast-2
        /// </summary>
        [Input("regionCode")]
        public Input<string>? RegionCode { get; set; }

        /// <summary>
        /// Deprecated: Storage GB
        /// </summary>
        [Input("storageGb")]
        public Input<int>? StorageGb { get; set; }

        [Input("timeouts")]
        public Input<Inputs.ServiceTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// The Postgres user for this service
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// The VpcID this service is tied to.
        /// </summary>
        [Input("vpcId")]
        public Input<int>? VpcId { get; set; }

        public ServiceState()
        {
        }
        public static new ServiceState Empty => new ServiceState();
    }
}
