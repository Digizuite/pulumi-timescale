# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ServiceArgs', 'Service']

@pulumi.input_type
class ServiceArgs:
    def __init__(__self__, *,
                 enable_ha_replica: Optional[pulumi.Input[bool]] = None,
                 memory_gb: Optional[pulumi.Input[int]] = None,
                 milli_cpu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region_code: Optional[pulumi.Input[str]] = None,
                 storage_gb: Optional[pulumi.Input[int]] = None,
                 timeouts: Optional[pulumi.Input['ServiceTimeoutsArgs']] = None,
                 vpc_id: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Service resource.
        :param pulumi.Input[bool] enable_ha_replica: Enable HA Replica
        :param pulumi.Input[int] memory_gb: Memory GB
        :param pulumi.Input[int] milli_cpu: Milli CPU
        :param pulumi.Input[str] name: Service Name is the configurable name assigned to this resource. If none is provided, a default will be generated by the provider.
        :param pulumi.Input[str] region_code: The region for this service. Currently supported regions are us-east-1, eu-west-1, us-west-2, eu-central-1, ap-southeast-2
        :param pulumi.Input[int] storage_gb: Deprecated: Storage GB
        :param pulumi.Input[int] vpc_id: The VpcID this service is tied to.
        """
        if enable_ha_replica is not None:
            pulumi.set(__self__, "enable_ha_replica", enable_ha_replica)
        if memory_gb is not None:
            pulumi.set(__self__, "memory_gb", memory_gb)
        if milli_cpu is not None:
            pulumi.set(__self__, "milli_cpu", milli_cpu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region_code is not None:
            pulumi.set(__self__, "region_code", region_code)
        if storage_gb is not None:
            warnings.warn("""This field is ignored. With the new usage-based storage Timescale automatically allocates the disk space needed by your service and you only pay for the disk space you use.""", DeprecationWarning)
            pulumi.log.warn("""storage_gb is deprecated: This field is ignored. With the new usage-based storage Timescale automatically allocates the disk space needed by your service and you only pay for the disk space you use.""")
        if storage_gb is not None:
            pulumi.set(__self__, "storage_gb", storage_gb)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="enableHaReplica")
    def enable_ha_replica(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable HA Replica
        """
        return pulumi.get(self, "enable_ha_replica")

    @enable_ha_replica.setter
    def enable_ha_replica(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_ha_replica", value)

    @property
    @pulumi.getter(name="memoryGb")
    def memory_gb(self) -> Optional[pulumi.Input[int]]:
        """
        Memory GB
        """
        return pulumi.get(self, "memory_gb")

    @memory_gb.setter
    def memory_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_gb", value)

    @property
    @pulumi.getter(name="milliCpu")
    def milli_cpu(self) -> Optional[pulumi.Input[int]]:
        """
        Milli CPU
        """
        return pulumi.get(self, "milli_cpu")

    @milli_cpu.setter
    def milli_cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "milli_cpu", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service Name is the configurable name assigned to this resource. If none is provided, a default will be generated by the provider.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="regionCode")
    def region_code(self) -> Optional[pulumi.Input[str]]:
        """
        The region for this service. Currently supported regions are us-east-1, eu-west-1, us-west-2, eu-central-1, ap-southeast-2
        """
        return pulumi.get(self, "region_code")

    @region_code.setter
    def region_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region_code", value)

    @property
    @pulumi.getter(name="storageGb")
    def storage_gb(self) -> Optional[pulumi.Input[int]]:
        """
        Deprecated: Storage GB
        """
        warnings.warn("""This field is ignored. With the new usage-based storage Timescale automatically allocates the disk space needed by your service and you only pay for the disk space you use.""", DeprecationWarning)
        pulumi.log.warn("""storage_gb is deprecated: This field is ignored. With the new usage-based storage Timescale automatically allocates the disk space needed by your service and you only pay for the disk space you use.""")

        return pulumi.get(self, "storage_gb")

    @storage_gb.setter
    def storage_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_gb", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ServiceTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ServiceTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[int]]:
        """
        The VpcID this service is tied to.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class _ServiceState:
    def __init__(__self__, *,
                 enable_ha_replica: Optional[pulumi.Input[bool]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 memory_gb: Optional[pulumi.Input[int]] = None,
                 milli_cpu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 region_code: Optional[pulumi.Input[str]] = None,
                 storage_gb: Optional[pulumi.Input[int]] = None,
                 timeouts: Optional[pulumi.Input['ServiceTimeoutsArgs']] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Service resources.
        :param pulumi.Input[bool] enable_ha_replica: Enable HA Replica
        :param pulumi.Input[str] hostname: The hostname for this service
        :param pulumi.Input[int] memory_gb: Memory GB
        :param pulumi.Input[int] milli_cpu: Milli CPU
        :param pulumi.Input[str] name: Service Name is the configurable name assigned to this resource. If none is provided, a default will be generated by the provider.
        :param pulumi.Input[str] password: The Postgres password for this service. The password is provided once during service creation
        :param pulumi.Input[int] port: The port for this service
        :param pulumi.Input[str] region_code: The region for this service. Currently supported regions are us-east-1, eu-west-1, us-west-2, eu-central-1, ap-southeast-2
        :param pulumi.Input[int] storage_gb: Deprecated: Storage GB
        :param pulumi.Input[str] username: The Postgres user for this service
        :param pulumi.Input[int] vpc_id: The VpcID this service is tied to.
        """
        if enable_ha_replica is not None:
            pulumi.set(__self__, "enable_ha_replica", enable_ha_replica)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if memory_gb is not None:
            pulumi.set(__self__, "memory_gb", memory_gb)
        if milli_cpu is not None:
            pulumi.set(__self__, "milli_cpu", milli_cpu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if region_code is not None:
            pulumi.set(__self__, "region_code", region_code)
        if storage_gb is not None:
            warnings.warn("""This field is ignored. With the new usage-based storage Timescale automatically allocates the disk space needed by your service and you only pay for the disk space you use.""", DeprecationWarning)
            pulumi.log.warn("""storage_gb is deprecated: This field is ignored. With the new usage-based storage Timescale automatically allocates the disk space needed by your service and you only pay for the disk space you use.""")
        if storage_gb is not None:
            pulumi.set(__self__, "storage_gb", storage_gb)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="enableHaReplica")
    def enable_ha_replica(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable HA Replica
        """
        return pulumi.get(self, "enable_ha_replica")

    @enable_ha_replica.setter
    def enable_ha_replica(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_ha_replica", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        The hostname for this service
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="memoryGb")
    def memory_gb(self) -> Optional[pulumi.Input[int]]:
        """
        Memory GB
        """
        return pulumi.get(self, "memory_gb")

    @memory_gb.setter
    def memory_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_gb", value)

    @property
    @pulumi.getter(name="milliCpu")
    def milli_cpu(self) -> Optional[pulumi.Input[int]]:
        """
        Milli CPU
        """
        return pulumi.get(self, "milli_cpu")

    @milli_cpu.setter
    def milli_cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "milli_cpu", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service Name is the configurable name assigned to this resource. If none is provided, a default will be generated by the provider.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The Postgres password for this service. The password is provided once during service creation
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        The port for this service
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="regionCode")
    def region_code(self) -> Optional[pulumi.Input[str]]:
        """
        The region for this service. Currently supported regions are us-east-1, eu-west-1, us-west-2, eu-central-1, ap-southeast-2
        """
        return pulumi.get(self, "region_code")

    @region_code.setter
    def region_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region_code", value)

    @property
    @pulumi.getter(name="storageGb")
    def storage_gb(self) -> Optional[pulumi.Input[int]]:
        """
        Deprecated: Storage GB
        """
        warnings.warn("""This field is ignored. With the new usage-based storage Timescale automatically allocates the disk space needed by your service and you only pay for the disk space you use.""", DeprecationWarning)
        pulumi.log.warn("""storage_gb is deprecated: This field is ignored. With the new usage-based storage Timescale automatically allocates the disk space needed by your service and you only pay for the disk space you use.""")

        return pulumi.get(self, "storage_gb")

    @storage_gb.setter
    def storage_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_gb", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['ServiceTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['ServiceTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The Postgres user for this service
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[int]]:
        """
        The VpcID this service is tied to.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vpc_id", value)


class Service(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_ha_replica: Optional[pulumi.Input[bool]] = None,
                 memory_gb: Optional[pulumi.Input[int]] = None,
                 milli_cpu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region_code: Optional[pulumi.Input[str]] = None,
                 storage_gb: Optional[pulumi.Input[int]] = None,
                 timeouts: Optional[pulumi.Input[pulumi.InputType['ServiceTimeoutsArgs']]] = None,
                 vpc_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a Service resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enable_ha_replica: Enable HA Replica
        :param pulumi.Input[int] memory_gb: Memory GB
        :param pulumi.Input[int] milli_cpu: Milli CPU
        :param pulumi.Input[str] name: Service Name is the configurable name assigned to this resource. If none is provided, a default will be generated by the provider.
        :param pulumi.Input[str] region_code: The region for this service. Currently supported regions are us-east-1, eu-west-1, us-west-2, eu-central-1, ap-southeast-2
        :param pulumi.Input[int] storage_gb: Deprecated: Storage GB
        :param pulumi.Input[int] vpc_id: The VpcID this service is tied to.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ServiceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Service resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_ha_replica: Optional[pulumi.Input[bool]] = None,
                 memory_gb: Optional[pulumi.Input[int]] = None,
                 milli_cpu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region_code: Optional[pulumi.Input[str]] = None,
                 storage_gb: Optional[pulumi.Input[int]] = None,
                 timeouts: Optional[pulumi.Input[pulumi.InputType['ServiceTimeoutsArgs']]] = None,
                 vpc_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceArgs.__new__(ServiceArgs)

            __props__.__dict__["enable_ha_replica"] = enable_ha_replica
            __props__.__dict__["memory_gb"] = memory_gb
            __props__.__dict__["milli_cpu"] = milli_cpu
            __props__.__dict__["name"] = name
            __props__.__dict__["region_code"] = region_code
            if storage_gb is not None and not opts.urn:
                warnings.warn("""This field is ignored. With the new usage-based storage Timescale automatically allocates the disk space needed by your service and you only pay for the disk space you use.""", DeprecationWarning)
                pulumi.log.warn("""storage_gb is deprecated: This field is ignored. With the new usage-based storage Timescale automatically allocates the disk space needed by your service and you only pay for the disk space you use.""")
            __props__.__dict__["storage_gb"] = storage_gb
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["hostname"] = None
            __props__.__dict__["password"] = None
            __props__.__dict__["port"] = None
            __props__.__dict__["username"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Service, __self__).__init__(
            'timescale:index/service:Service',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_ha_replica: Optional[pulumi.Input[bool]] = None,
            hostname: Optional[pulumi.Input[str]] = None,
            memory_gb: Optional[pulumi.Input[int]] = None,
            milli_cpu: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[int]] = None,
            region_code: Optional[pulumi.Input[str]] = None,
            storage_gb: Optional[pulumi.Input[int]] = None,
            timeouts: Optional[pulumi.Input[pulumi.InputType['ServiceTimeoutsArgs']]] = None,
            username: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[int]] = None) -> 'Service':
        """
        Get an existing Service resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enable_ha_replica: Enable HA Replica
        :param pulumi.Input[str] hostname: The hostname for this service
        :param pulumi.Input[int] memory_gb: Memory GB
        :param pulumi.Input[int] milli_cpu: Milli CPU
        :param pulumi.Input[str] name: Service Name is the configurable name assigned to this resource. If none is provided, a default will be generated by the provider.
        :param pulumi.Input[str] password: The Postgres password for this service. The password is provided once during service creation
        :param pulumi.Input[int] port: The port for this service
        :param pulumi.Input[str] region_code: The region for this service. Currently supported regions are us-east-1, eu-west-1, us-west-2, eu-central-1, ap-southeast-2
        :param pulumi.Input[int] storage_gb: Deprecated: Storage GB
        :param pulumi.Input[str] username: The Postgres user for this service
        :param pulumi.Input[int] vpc_id: The VpcID this service is tied to.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServiceState.__new__(_ServiceState)

        __props__.__dict__["enable_ha_replica"] = enable_ha_replica
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["memory_gb"] = memory_gb
        __props__.__dict__["milli_cpu"] = milli_cpu
        __props__.__dict__["name"] = name
        __props__.__dict__["password"] = password
        __props__.__dict__["port"] = port
        __props__.__dict__["region_code"] = region_code
        __props__.__dict__["storage_gb"] = storage_gb
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["username"] = username
        __props__.__dict__["vpc_id"] = vpc_id
        return Service(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="enableHaReplica")
    def enable_ha_replica(self) -> pulumi.Output[bool]:
        """
        Enable HA Replica
        """
        return pulumi.get(self, "enable_ha_replica")

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[str]:
        """
        The hostname for this service
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="memoryGb")
    def memory_gb(self) -> pulumi.Output[int]:
        """
        Memory GB
        """
        return pulumi.get(self, "memory_gb")

    @property
    @pulumi.getter(name="milliCpu")
    def milli_cpu(self) -> pulumi.Output[int]:
        """
        Milli CPU
        """
        return pulumi.get(self, "milli_cpu")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Service Name is the configurable name assigned to this resource. If none is provided, a default will be generated by the provider.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        The Postgres password for this service. The password is provided once during service creation
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[int]:
        """
        The port for this service
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="regionCode")
    def region_code(self) -> pulumi.Output[str]:
        """
        The region for this service. Currently supported regions are us-east-1, eu-west-1, us-west-2, eu-central-1, ap-southeast-2
        """
        return pulumi.get(self, "region_code")

    @property
    @pulumi.getter(name="storageGb")
    def storage_gb(self) -> pulumi.Output[Optional[int]]:
        """
        Deprecated: Storage GB
        """
        warnings.warn("""This field is ignored. With the new usage-based storage Timescale automatically allocates the disk space needed by your service and you only pay for the disk space you use.""", DeprecationWarning)
        pulumi.log.warn("""storage_gb is deprecated: This field is ignored. With the new usage-based storage Timescale automatically allocates the disk space needed by your service and you only pay for the disk space you use.""")

        return pulumi.get(self, "storage_gb")

    @property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.ServiceTimeouts']]:
        return pulumi.get(self, "timeouts")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        The Postgres user for this service
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[Optional[int]]:
        """
        The VpcID this service is tied to.
        """
        return pulumi.get(self, "vpc_id")

