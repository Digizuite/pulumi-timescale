name: release
on:
  push:
    tags:
      - v*.*.*
env:
  PROVIDER: timescale
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GOVERSION: 1.20.1
  DOTNETVERSION: |
    6.0.x
    3.1.301
  NUGET_PUBLISH_KEY: ${{ secrets.NUGET_PACKAGES_TOKEN }}
  NUGET_FEED_URL: https://nuget.pkg.github.com/digizuite/index.json
  PUBLISH_NUGET: true
  NODEVERSION: 20.x
#  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
#  NUGET_PUBLISH_KEY: ${{ secrets.NUGET_PUBLISH_KEY }}
#  PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  PYTHONVERSION: "3.9"
#  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
jobs:
  build_sdk:
    name: build_sdk
    needs: prerequisites
    runs-on: ubuntu-latest-8-cores
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Checkout Scripts Repo
        uses: actions/checkout@v3
        with:
          path: ci-scripts
          repository: pulumi/scripts
      - name: Unshallow clone for tags
        run: git fetch --prune --unshallow --tags
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          cache-dependency-path: |
            sdk/go.sum
          go-version: 1.21.x
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.10.0
        with:
          repo: pulumi/pulumictl
      - name: Install Pulumi CLI
        uses: pulumi/actions@v4
        with:
          pulumi-version: v3.77.1
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODEVERSION }}
          registry-url: https://registry.npmjs.org
      - name: Setup DotNet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNETVERSION }}
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHONVERSION }}
      - name: Download provider + tfgen binaries
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.PROVIDER }}-provider.tar.gz
          path: ${{ github.workspace }}/bin
      - name: Untar provider binaries
        run: >-
          tar -zxf ${{ github.workspace }}/bin/provider.tar.gz -C ${{
          github.workspace}}/bin
          
          find ${{ github.workspace }} -name "pulumi-*-${{ env.PROVIDER }}" -print -exec chmod +x {} \;
      - name: Install plugins
        run: make install_plugins
      - name: Update path
        run: echo "${{ github.workspace }}/bin" >> "$GITHUB_PATH"
      - name: Set PACKAGE_VERSION to Env
        run: echo "PACKAGE_VERSION=$(pulumictl get version --language generic)" >>
          "$GITHUB_ENV"
      - name: Build SDK
        run: make build_${{ matrix.language }}
      - name: Check worktree clean
        run: ./ci-scripts/ci/check-worktree-is-clean
      - name: Compress SDK folder
        run: tar -zcf sdk/${{ matrix.language }}.tar.gz -C sdk/${{ matrix.language }} .
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.language  }}-sdk.tar.gz
          path: ${{ github.workspace}}/sdk/${{ matrix.language }}.tar.gz
    strategy:
      fail-fast: true
      matrix:
        language:
#          - nodejs
#          - python
          - dotnet
#          - go
#  create_docs_build:
#    name: create_docs_build
#    needs: tag_sdk
#    runs-on: ubuntu-latest
#    steps:
#      - name: Install pulumictl
#        uses: jaxxstorm/action-install-gh-release@v1.10.0
#        with:
#          repo: pulumi/pulumictl
#      - env:
#          GITHUB_TOKEN: ${{ secrets.PULUMI_BOT_TOKEN }}
#        name: Dispatch Event
#        run: pulumictl create docs-build pulumi-${{ env.PROVIDER }}
#          "${GITHUB_REF#refs/tags/}"
  prerequisites:
    name: prerequisites
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Checkout Scripts Repo
        uses: actions/checkout@v3
        with:
          path: ci-scripts
          repository: pulumi/scripts
      - name: Unshallow clone for tags
        run: git fetch --prune --unshallow --tags
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          cache-dependency-path: |
            sdk/go.sum
          go-version: 1.21.x
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.10.0
        with:
          repo: pulumi/pulumictl
      - name: Install Pulumi CLI
        uses: pulumi/actions@v4
        with:
          pulumi-version: v3.77.1
      - if: github.event_name == 'pull_request'
        name: Install Schema Tools
        uses: jaxxstorm/action-install-gh-release@v1.10.0
        with:
          repo: pulumi/schema-tools
      - name: Build tfgen & provider binaries
        run: make provider
      - if: github.event_name == 'pull_request'
        name: Check Schema is Valid
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          {
            echo "SCHEMA_CHANGES<<$EOF";
            schema-tools compare -p ${{ env.PROVIDER }} -o ${{ github.event.repository.default_branch }} -n --local-path=provider/cmd/pulumi-resource-${{ env.PROVIDER }}/schema.json;
            echo "$EOF";
          } >> "$GITHUB_ENV"
      - if: github.event_name == 'pull_request' && github.actor != 'dependabot[bot]'
        name: Comment on PR with Details of Schema Check
        uses: thollander/actions-comment-pull-request@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          comment_tag: schemaCheck
          message: >+
            ### Does the PR have any schema changes?
            
            
            ${{ env.SCHEMA_CHANGES }}
            
            
            Maintainer note: consult the [runbook](https://github.com/pulumi/platform-providers-team/blob/main/playbooks/tf-provider-updating.md) for dealing with any breaking changes.

      - name: Tar provider binaries
        run: tar -zcf ${{ github.workspace }}/bin/provider.tar.gz -C ${{
          github.workspace }}/bin/ pulumi-resource-${{ env.PROVIDER }}
          pulumi-tfgen-${{ env.PROVIDER }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PROVIDER }}-provider.tar.gz
          path: ${{ github.workspace }}/bin/provider.tar.gz
  publish:
    name: publish
    needs:
      - test
    runs-on: ubuntu-latest-8-cores
    permissions:
      contents: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Unshallow clone for tags
        run: git fetch --prune --unshallow --tags
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          cache-dependency-path: |
            sdk/go.sum
          go-version: 1.21.x
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.10.0
        with:
          repo: pulumi/pulumictl
      - name: Install Pulumi CLI
        uses: pulumi/actions@v4
        with:
          pulumi-version: v3.77.1
      - name: Set PreRelease Version
        run: echo "GORELEASER_CURRENT_TAG=v$(pulumictl get version --language generic)" >> "$GITHUB_ENV"
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          args: -p 1 release --rm-dist --timeout 20m0s
          version: latest
  publish_sdk:
    name: publish_sdk
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Verify input
        run: echo 'Publishing SDK:' && echo ${{ inputs.sdk }}
        shell: bash
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
      - name: Unshallow clone for tags
        run: git fetch --prune --unshallow --tags
        shell: bash
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.5.0
        with:
          repo: pulumi/pulumictl
      - name: Install Pulumi CLI
        uses: pulumi/action-install-pulumi-cli@v2
#      - name: Setup Node
#        uses: actions/setup-node@v3
#        with:
#          node-version: ${{ env.NODEVERSION }}
#          registry-url: https://registry.npmjs.org
#      - name: Download nodejs SDK
#        uses: actions/download-artifact@v2
#        with:
#          name: nodejs-sdk.tar.gz
#          path: ${{ github.workspace }}/sdk/
#      - name: Uncompress nodejs SDK
#        run: tar -zxf ${{ github.workspace }}/sdk/nodejs.tar.gz -C
#          ${{ github.workspace }}/sdk/nodejs
#        shell: bash
#      - name: Run npm whoami
#        run: npm whoami
#        shell: bash
#        env:
#          NODE_AUTH_TOKEN: ${{ env.NODE_AUTH_TOKEN }}
#      - name: Publish Node
#        run: pulumi package publish-sdk nodejs --path ${{ github.workspace }}/sdk/nodejs/bin
#        shell: bash
#        env:
#          NODE_AUTH_TOKEN: ${{ env.NODE_AUTH_TOKEN }}
      - name: Setup DotNet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNETVERSION }}
          source-url: ${{ env.NUGET_FEED_URL }}
        env:
          NUGET_AUTH_TOKEN: ${{secrets.NUGET_PACKAGES_TOKEN}}
      - name: Download dotnet SDK
        uses: actions/download-artifact@v3
        with:
          name: dotnet-sdk.tar.gz
          path: ${{ github.workspace }}/sdk/
      - name: Uncompress dotnet SDK
        run: tar -zxf ${{ github.workspace }}/sdk/dotnet.tar.gz -C
          ${{ github.workspace }}/sdk/dotnet
        shell: bash
      - name: Publish dotnet SDK
        run: find "${{ github.workspace }}/sdk/dotnet/bin/Debug/" -name 'Pulumi.*.nupkg'
          -exec dotnet nuget push -k "${NUGET_PUBLISH_KEY}" -s "${{ env.NUGET_FEED_URL }}" {} \;
        shell: bash
#      - name: Setup Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: ${{ env.PYTHONVERSION }}
#      - name: Download python SDK
#        uses: actions/download-artifact@v2
#        with:
#          name: python-sdk.tar.gz
#          path: ${{ github.workspace }}/sdk/
#      - name: Uncompress python SDK
#        run: tar -zxf ${{ github.workspace }}/sdk/python.tar.gz -C
#          ${{ github.workspace }}/sdk/python
#        shell: bash
#      - name: Install Twine
#        run: python -m pip install pip twine
#        shell: bash
#      - name: Publish Python SDK
#        run: if [ -n "${PYPI_USERNAME}" ] ;
#          then PYPI_PUBLISH_USERNAME=${PYPI_USERNAME};
#          else PYPI_PUBLISH_USERNAME="pulumi";
#          fi &&
#          echo "Publishing Pip package to pypi as ${PYPI_PUBLISH_USERNAME}:" &&
#          twine upload
#          -u "${PYPI_PUBLISH_USERNAME}" -p "${PYPI_PASSWORD}"
#          "${{ github.workspace }}/sdk/python/bin/dist/*"
#          --skip-existing
#          --verbose
#        shell: bash
  tag_sdk:
    name: tag_sdk
    needs: publish_sdk
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.10.0
        with:
          repo: pulumi/pulumictl
      - name: Add SDK version tag
        run: git tag "sdk/v$(pulumictl get version --language generic)" && git push origin
          "sdk/v$(pulumictl get version --language generic)"

  clean_up_release_labels:
    name: Clean up release labels
#    needs: create_docs_build

    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Unshallow clone for PR merge bases
        run: git fetch --prune --unshallow --tags
      - name: Clean up release labels
        uses: pulumi/action-release-by-pr-label@main
        with:
          command: "clean-up-release-labels"
          repo: ${{ github.repository }}
          commit: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: test
    needs: build_sdk
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          submodules: true
#      - name: Checkout Scripts Repo
#        uses: actions/checkout@v3
#        with:
#          path: ci-scripts
#          repository: pulumi/scripts
#      - name: Unshallow clone for tags
#        run: git fetch --prune --unshallow --tags
#      - name: Install Go
#        uses: actions/setup-go@v4
#        with:
#          cache-dependency-path: |
#            sdk/go.sum
#          go-version: 1.21.x
#      - name: Install pulumictl
#        uses: jaxxstorm/action-install-gh-release@v1.10.0
#        with:
#          repo: pulumi/pulumictl
#      - name: Install Pulumi CLI
#        uses: pulumi/actions@v4
#        with:
#          pulumi-version: v3.77.1
#      - name: Setup Node
#        uses: actions/setup-node@v3
#        with:
#          node-version: ${{ env.NODEVERSION }}
#          registry-url: https://registry.npmjs.org
#      - name: Setup DotNet
#        uses: actions/setup-dotnet@v3
#        with:
#          dotnet-version: ${{ env.DOTNETVERSION }}
#      - name: Setup Python
#        uses: actions/setup-python@v4
#        with:
#          python-version: ${{ env.PYTHONVERSION }}
#      - name: Download provider + tfgen binaries
#        uses: actions/download-artifact@v3
#        with:
#          name: ${{ env.PROVIDER }}-provider.tar.gz
#          path: ${{ github.workspace }}/bin
#      - name: Untar provider binaries
#        run: >-
#          tar -zxf ${{ github.workspace }}/bin/provider.tar.gz -C ${{
#          github.workspace}}/bin
#
#          find ${{ github.workspace }} -name "pulumi-*-${{ env.PROVIDER }}" -print -exec chmod +x {} \;
#      - run: dotnet nuget add source ${{ github.workspace }}/nuget
#      - name: Download SDK
#        uses: actions/download-artifact@v3
#        with:
#          name: ${{ matrix.language }}-sdk.tar.gz
#          path: ${{ github.workspace}}/sdk/
#      - name: Uncompress SDK folder
#        run: tar -zxf ${{ github.workspace }}/sdk/${{ matrix.language }}.tar.gz -C ${{
#          github.workspace }}/sdk/${{ matrix.language }}
#      - name: Update path
#        run: echo "${{ github.workspace }}/bin" >> "$GITHUB_PATH"
#      - name: Install Python deps
#        run: |-
#          pip3 install virtualenv==20.0.23
#          pip3 install pipenv
#      - name: Install dependencies
#        run: make install_${{ matrix.language}}_sdk
#      - name: Install gotestfmt
#        uses: GoTestTools/gotestfmt-action@v2
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#          version: v2.4.0
#      - name: Run tests
#        run: cd examples && go test -v -json -count=1 -cover -timeout 2h -tags=${{
#          matrix.language }} -parallel 4 . 2>&1 | tee /tmp/gotest.log | gotestfmt
    strategy:
      fail-fast: false
      matrix:
        language:
#          - nodejs
#          - python
          - dotnet
#          - go